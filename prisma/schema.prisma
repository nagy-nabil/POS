// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                  String            @id @default(cuid())
    userName            String            @unique
    email               String            @unique
    password            String
    role                RoleT             @default(STAFF)
    createdAt           DateTime          @default(now())
    phone               String
    activationsStatus   Boolean           @default(false)
    activationToken     String?
    resetPasswordToken  String?
    predecessorId       String?
    predecessor         User?             @relation("creator", fields: [predecessorId], references: [id])
    successors          User[]            @relation("creator")
    category            Category[]
    products            Product[]
    orders              Order[]
    ExpenseTypes        ExpenseTypes[]
    ExpenseStore        ExpenseStore[]
    Expenses            Expenses[]
    Losses              Loss[]
    /// roles user in
    roles               UserRoles[]
    /// roles this user created
    rolesCreated        Role[]
    permissionsAssigned RolePermissions[]
    Permission          Permission[]
}

// RBAC

model Role {
    id              String            @id @default(cuid())
    title           String            @unique
    description     String?
    createdAt       DateTime          @default(now())
    createdBy       User              @relation(fields: [createdById], references: [id])
    createdById     String
    /// many to many describe users in this role
    usersOnRole     UserRoles[]
    RolePermissions RolePermissions[]
}

// TODO should the permissions be hard coded?
model Permission {
    id              String            @id @default(cuid())
    title           String            @unique
    description     String?
    createdAt       DateTime          @default(now())
    createdBy       User              @relation(fields: [createdById], references: [id])
    createdById     String
    RolePermissions RolePermissions[]
}

model RolePermissions {
    role         Role       @relation(fields: [roleId], references: [id])
    roleId       String
    permission   Permission @relation(fields: [permissionId], references: [id])
    permissionId String
    createdAt    DateTime   @default(now())
    /// who assigned this permission to this role
    createdBy    User       @relation(fields: [createdById], references: [id])
    createdById  String

    @@id([permissionId, roleId])
}

model UserRoles {
    user   User   @relation(fields: [userId], references: [id])
    userId String
    Role   Role   @relation(fields: [roleId], references: [id])
    roleId String

    @@id([userId, roleId])
}

model Category {
    id          String    @id @default(cuid())
    name        String    @unique
    image       String
    createdAt   DateTime  @default(now())
    createdBy   User      @relation(fields: [createdById], references: [id])
    createdById String
    products    Product[]
}

model Product {
    id          String            @id @default(cuid())
    name        String
    // there a check constraint
    // alter table "Product" add constraint "stock_less_zero" check (stock >= 0);
    stock       Int
    // there a check constraint
    //alter table "Product" add constraint "buyprice_less_zero" check ("buyPrice" > 0);
    buyPrice    Float
    // there a check constraint
    //alter table "Product" add constraint "sellprice_less_zero" check ("sellPrice" > 0);
    sellPrice   Float
    image       String
    createdAt   DateTime          @default(now())
    createdBy   User              @relation(fields: [createdById], references: [id])
    createdById String
    category    Category          @relation(fields: [categoryId], references: [id])
    categoryId  String
    orders      ProductsOnOrder[]
    losses      ProductsOnLoss[]
}

model Order {
    id          String            @id @default(cuid())
    paymentType PaymentType       @default(CASH)
    createdAt   DateTime          @default(now())
    createdById String
    createdBy   User              @relation(fields: [createdById], references: [id])
    products    ProductsOnOrder[]
}

model ProductsOnOrder {
    productId       String
    Product         Product @relation(fields: [productId], references: [id])
    orderId         String
    order           Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
    // there a check constraint
    //alter table "ProductsOnOrder" add constraint "quntatity_zero" check (quantity > 0);
    quantity        Int     @default(1)
    // snapshot of the product at time of the order
    buyPriceAtSale  Float // Price of the product at the time of the order
    sellPriceAtSale Float // Price of the product at the time of the order

    @@id([productId, orderId])
}

// EXPENSES/LOSSES

model ExpenseTypes {
    id           String         @id @default(cuid())
    name         String
    description  String?
    createdAt    DateTime       @default(now())
    createdById  String
    createdBy    User           @relation(fields: [createdById], references: [id])
    ExpenseStore ExpenseStore[]
}

// this model only hold expenses data but not indicating we spend this money
model ExpenseStore {
    id          String       @id @default(cuid())
    name        String
    description String?
    // for user level concept, simply asking the user do you want to save this data for later use or not
    // true indicate don't show this expense in the ui
    onTheFly    Boolean      @default(false)
    amount      Float
    // null value indicate aperiodic expenses
    remindAt    DateTime?
    typeId      String
    type        ExpenseTypes @relation(fields: [typeId], references: [id])
    createdAt   DateTime     @default(now())
    createdById String
    createdBy   User         @relation(fields: [createdById], references: [id])

    SpendingsOnExpenses SpendingsOnExpenses[]
}

// this table describe the spendings, not the previous one
model Expenses {
    id                  String                @id @default(cuid())
    description         String?
    additionalAmount    Float                 @default(0)
    createdAt           DateTime              @default(now())
    createdById         String
    createdBy           User                  @relation(fields: [createdById], references: [id])
    SpendingsOnExpenses SpendingsOnExpenses[]
}

// for more general case expense could have more than expenseStore at once
model SpendingsOnExpenses {
    spendingId String
    spending   ExpenseStore @relation(fields: [spendingId], references: [id])
    expenseId  String
    expense    Expenses     @relation(fields: [expenseId], references: [id])

    @@id([spendingId, expenseId])
}

model Loss {
    id               String           @id @default(cuid())
    name             String?
    description      String?
    additionalAmount Float            @default(0)
    createdAt        DateTime         @default(now())
    createdBy        User             @relation(fields: [createdById], references: [id])
    createdById      String
    products         ProductsOnLoss[]
}

model ProductsOnLoss {
    lossId          String
    loss            Loss    @relation(fields: [lossId], references: [id], onDelete: Cascade)
    productId       String
    Product         Product @relation(fields: [productId], references: [id])
    quantity        Float
    // snapshot of the product at time of the order
    buyPriceAtLoss  Float // Price of the product at the time of the order
    sellPriceAtLoss Float // Price of the product at the time of the order

    @@id([productId, lossId])
}

enum RoleT {
    SUPERADMIN
    ADMIN
    STAFF
    SUPPLIER
}

enum PaymentType {
    CASH
    CREDITCARD
}

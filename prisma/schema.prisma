// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                 String     @id @default(cuid())
    userName           String     @unique
    email              String     @unique
    password           String
    role               Role       @default(STAFF)
    createdAt          DateTime   @default(now())
    phone              String
    activationsStatus  Boolean    @default(false)
    activationToken    String?
    resetPasswordToken String?
    predecessorId      String?
    predecessor        User?      @relation("creator", fields: [predecessorId], references: [id])
    successors         User[]     @relation("creator")
    category           Category[]
    products           Product[]
    orders             Order[]
}

model Category {
    id          String    @id @default(cuid())
    name        String    @unique
    image       String
    createdAt   DateTime  @default(now())
    createdBy   User      @relation(fields: [createdById], references: [id])
    createdById String
    products    Product[]
}

model Product {
    id          String            @id @default(cuid())
    name        String
    // there a check constraint
    // alter table "Product" add constraint "stock_less_zero" check (stock >= 0);
    stock       Int
    // there a check constraint
    //alter table "Product" add constraint "buyprice_less_zero" check ("buyPrice" > 0);
    buyPrice    Float
    // there a check constraint
    //alter table "Product" add constraint "sellprice_less_zero" check ("sellPrice" > 0);
    sellPrice   Float
    image       String
    createdAt   DateTime          @default(now())
    createdBy   User              @relation(fields: [createdById], references: [id])
    createdById String
    category    Category          @relation(fields: [categoryId], references: [id])
    categoryId  String
    orders      ProductsOnOrder[]
}

model Order {
    id          String            @id @default(cuid())
    paymentType PaymentType       @default(CASH)
    createdAt   DateTime          @default(now())
    createdById String
    createdBy   User              @relation(fields: [createdById], references: [id])
    products    ProductsOnOrder[]
}

model ProductsOnOrder {
    productId   String
    Product     Product @relation(fields: [productId], references: [id])
    orderId     String
    order       Order   @relation(fields: [orderId], references: [id])
    // there a check constraint
    //alter table "ProductsOnOrder" add constraint "quntatity_zero" check (quantity > 0);
    quantity    Int     @default(1)
    priceAtSale Float // Price of the product at the time of the order

    @@id([productId, orderId])
}

enum Role {
    SUPERADMIN
    ADMIN
    STAFF
    SUPPLIER
}

enum PaymentType {
    CASH
    CREDITCARD
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                 String         @id @default(cuid())
    userName           String         @unique
    email              String         @unique
    password           String
    role               Role           @default(STAFF)
    createdAt          DateTime       @default(now())
    phone              String
    activationsStatus  Boolean        @default(false)
    activationToken    String?
    resetPasswordToken String?
    predecessorId      String?
    predecessor        User?          @relation("creator", fields: [predecessorId], references: [id])
    successors         User[]         @relation("creator")
    category           Category[]
    products           Product[]
    orders             Order[]
    ExpenseTypes       ExpenseTypes[]
    ExpenseStore       ExpenseStore[]
    Expenses           Expenses[]
}

model Category {
    id          String    @id @default(cuid())
    name        String    @unique
    image       String
    createdAt   DateTime  @default(now())
    createdBy   User      @relation(fields: [createdById], references: [id])
    createdById String
    products    Product[]
}

model Product {
    id          String            @id @default(cuid())
    name        String
    // there a check constraint
    // alter table "Product" add constraint "stock_less_zero" check (stock >= 0);
    stock       Int
    // there a check constraint
    //alter table "Product" add constraint "buyprice_less_zero" check ("buyPrice" > 0);
    buyPrice    Float
    // there a check constraint
    //alter table "Product" add constraint "sellprice_less_zero" check ("sellPrice" > 0);
    sellPrice   Float
    image       String
    createdAt   DateTime          @default(now())
    createdBy   User              @relation(fields: [createdById], references: [id])
    createdById String
    category    Category          @relation(fields: [categoryId], references: [id])
    categoryId  String
    orders      ProductsOnOrder[]
}

model Order {
    id          String            @id @default(cuid())
    paymentType PaymentType       @default(CASH)
    createdAt   DateTime          @default(now())
    createdById String
    createdBy   User              @relation(fields: [createdById], references: [id])
    products    ProductsOnOrder[]
}

model ProductsOnOrder {
    productId       String
    Product         Product @relation(fields: [productId], references: [id])
    orderId         String
    order           Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
    // there a check constraint
    //alter table "ProductsOnOrder" add constraint "quntatity_zero" check (quantity > 0);
    quantity        Int     @default(1)
    // snapshot of the product at time of the order
    buyPriceAtSale  Float // Price of the product at the time of the order
    sellPriceAtSale Float // Price of the product at the time of the order

    @@id([productId, orderId])
}

// EXPENSES/LOSSES

model ExpenseTypes {
    id           String         @id @default(cuid())
    name         String
    description  String?
    createdAt    DateTime       @default(now())
    createdById  String
    createdBy    User           @relation(fields: [createdById], references: [id])
    ExpenseStore ExpenseStore[]
}

// this model only hold expenses data but not indicating we spend this money
model ExpenseStore {
    id          String       @id @default(cuid())
    name        String
    description String?
    // for user level concept, simply asking the user do you want to save this data for later use or not
    // true indicate don't show this expense in the ui
    onTheFly    Boolean      @default(false)
    amount      Float
    // null value indicate aperiodic expenses
    remindAt    DateTime?
    typeId      String
    type        ExpenseTypes @relation(fields: [typeId], references: [id])
    createdAt   DateTime     @default(now())
    createdById String
    createdBy   User         @relation(fields: [createdById], references: [id])

    SpendingsOnExpenses SpendingsOnExpenses[]
}

// this table describe the spendings, not the previous one
model Expenses {
    id                  String                @id @default(cuid())
    description         String?
    additionalAmount    Float                 @default(0)
    createdAt           DateTime              @default(now())
    createdById         String
    createdBy           User                  @relation(fields: [createdById], references: [id])
    SpendingsOnExpenses SpendingsOnExpenses[]
}

// for more general case expense could have more than expenseStore at once
model SpendingsOnExpenses {
    spendingId String
    spending   ExpenseStore @relation(fields: [spendingId], references: [id])
    expenseId  String
    expense    Expenses     @relation(fields: [expenseId], references: [id])

    @@id([spendingId, expenseId])
}

enum Role {
    SUPERADMIN
    ADMIN
    STAFF
    SUPPLIER
}

enum PaymentType {
    CASH
    CREDITCARD
}
